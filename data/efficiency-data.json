[
{"language": "java", "component": "Variables", "observation": "int is the most efficient primitive data type."},
{"language": "java", "component": "Variables", "observation": "Static variables consume up to 17,700% more energy compared to local variables."},
{"language": "java", "component": "Variables", "observation": "Access modifiers have no impact on a variable's energy consumption."},
{"language": "java", "component": "Variables", "observation": "Scientific notation results in lower energy consumption for decimal numbers."},
{"language": "java", "component": "Variables", "observation": "Primitive data types are much more efficient than their wrapper classes."},
{"language": "java", "component": "Operators", "observation": "The modulus arithmetic operator consumes up to 1,620% more energy than other arithmetic operators."},
{"language": "java", "component": "Short Circuit operator", "observation": "Putting the most common cases first in short circuit operators can save up to 87% of energy."},
{"language": "java", "component": "Operators", "observation": "Normal and compound assignments have the same amount of energy consumption."},
{"language": "java", "component": "Operators", "observation": "Post-increment, pre-increment, post-decrement, and pre-decrement operators consume the same energy."},
{"language": "java", "component": "Control Statements", "observation": "The ternary operator consumes up to 37% more energy than the if-then-else statement."},
{"language": "java", "component": "Loop", "observation": "int is the most energy-efficient iteration variable in a for loop."},
{"language": "java", "component": "Control Statements", "observation": "for, while, and do-while loop statements consume the same energy."},
{"language": "java", "component": "Control Statements", "observation": "The enhanced for statement consumes the same energy as the for statement."},
{"language": "java", "component": "Loop", "observation": "A method termination expression can consume higher energy than a variable termination expression."},
{"language": "java", "component": "Exception", "observation": "The try-catch block's scope can change how it consumes energy."},
{"language": "java", "component": "Exception", "observation": "Executing a catch block results in higher energy consumption."},
{"language": "java", "component": "Exception", "observation": "Using an if condition for error checking causes higher energy consumption."},
{"language": "java", "component": "String", "observation": "The StringBuilder append method consumes up to 148,069% lower energy than the String concatenation operator."},
{"language": "java", "component": "String", "observation": "Integer.toString and String.valueOf consume the same energy."},
{"language": "java", "component": "String", "observation": "The String compareTo method consumes up to 33% more energy than the String equals method."},
{"language": "java", "component": "Object", "observation": "Wrapper class objects are more energy-expensive compared to primitive data types."},
{"language": "java", "component": "Object", "observation": "Double wrapper class objects consume up to 115% more energy than Integer wrapper class objects."},
{"language": "java", "component": "Thread", "observation": "Creating threads by implementing a Runnable interface or extending the Thread class consumes the same energy."},
{"language": "java", "component": "Arrays", "observation": "System.arraycopy() is the most energy-efficient way to copy arrays."},
{"language": "java", "component": "Arrays", "observation": "Two-dimensional array column traversal results in up to 793% more energy."},
{"language": "java", "component": "Array", "observation": "Arrays consume 33% more energy than instance variables."}
]