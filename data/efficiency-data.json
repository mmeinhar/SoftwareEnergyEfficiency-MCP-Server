[
  {"lang": "java", "component": "Applications", "lang-keywords": "ConcurrentHashMapV8, Hashtable, XALAN, TOMCAT", "observation": "Switching from Hashtable to ConcurrentHashMapV8 reduces energy consumption by up to 17.82% in real-world applications like XALAN."},
  {"lang": "java", "component": "Applications", "lang-keywords": "ConcurrentHashMapV8, Hashtable, TOMCAT", "observation": "Switching from Hashtable to ConcurrentHashMapV8 reduces energy consumption by 9.32% in TOMCAT."},
  {"lang": "java", "component": "Arrays - Copy", "lang-keywords": "Arrays, System.arraycopy, clone, Arrays.copyOf", "observation": "Using System.arraycopy for array copying consumes less energy than manual copying, clone, and Arrays.copyOf."},
  {"lang": "java", "component": "Arrays - Traversal", "lang-keywords": "Arrays, row-major, column-major", "observation": "Traversing matrices in row-major order consumes less energy than column-major order."},
  {"lang": "java", "component": "Arrays - Traversal", "lang-keywords": "Arrays, row-major, column-major", "observation": "Array column traversal results in higher energy consumption than row traversal."},
  {"lang": "java", "component": "Collections - Configuration", "lang-keywords": "Collections, Map, initial-capacity, load-factor", "observation": "Setting initial capacity to the expected size in maps reduces energy consumption by avoiding resizes."},
  {"lang": "java", "component": "Collections - Configuration", "lang-keywords": "Collections, Map, load-factor", "observation": "Using a load factor of 0.75 provides a good balance for energy efficiency in maps."},
  {"lang": "java", "component": "Collections - Configuration", "lang-keywords": "Collections, Map, load-factor, rehashing", "observation": "Using a low load factor like 0.25 increases energy consumption due to frequent rehashing in maps."},
  {"lang": "java", "component": "Collections - List - Insertion", "lang-keywords": "Collections, List, ArrayList, Vector", "observation": "ArrayList consumes less energy than Vector for insertion operations."},
  {"lang": "java", "component": "Collections - List - Insertion", "lang-keywords": "Collections, List, Vector, Collections.synchronizedList, CopyOnWriteArrayList", "observation": "Vector consumes less energy than Collections.synchronizedList and CopyOnWriteArrayList for insertion operations."},
  {"lang": "java", "component": "Collections - List - Removal", "lang-keywords": "Collections, List", "observation": "Removal operations consume more energy than insertion operations in list implementations."},
  {"lang": "java", "component": "Collections - List - Removal", "lang-keywords": "Collections, List, index, object", "observation": "Removing elements by index consumes less energy than removing by object in lists."},
  {"lang": "java", "component": "Collections - List - Traversal", "lang-keywords": "Collections, List, CopyOnWriteArrayList, Vector, Collections.synchronizedList", "observation": "CopyOnWriteArrayList consumes less energy than Vector and Collections.synchronizedList for traversal operations."},
  {"lang": "java", "component": "Collections - List - Traversal", "lang-keywords": "Collections, List, ArrayList, thread-safe", "observation": "ArrayList consumes less energy than thread-safe list implementations for traversal operations."},
  {"lang": "java", "component": "Collections - Map - Insertion", "lang-keywords": "Collections, Map, ConcurrentHashMapV8, ConcurrentHashMap, LinkedHashMap, Hashtable, Collections.synchronizedMap, ConcurrentSkipListMap", "observation": "ConcurrentHashMapV8 consumes less energy than ConcurrentHashMap, LinkedHashMap, Hashtable, Collections.synchronizedMap, and ConcurrentSkipListMap for insertion operations."},
  {"lang": "java", "component": "Collections - Map - Removal", "lang-keywords": "Collections, Map, ConcurrentHashMapV8, ConcurrentHashMap", "observation": "ConcurrentHashMapV8 consumes less energy than ConcurrentHashMap for removal operations."},
  {"lang": "java", "component": "Collections - Map - Removal", "lang-keywords": "Collections, Map, ConcurrentSkipListMap", "observation": "ConcurrentSkipListMap removal operations consume more energy than insertion operations."},
  {"lang": "java", "component": "Collections - Map - Traversal", "lang-keywords": "Collections, Map, ConcurrentHashMapV8, ConcurrentHashMap, Hashtable, Collections.synchronizedMap, ConcurrentSkipListMap", "observation": "ConcurrentHashMapV8 consumes less energy than ConcurrentHashMap, Hashtable, Collections.synchronizedMap, and ConcurrentSkipListMap for traversal operations."},
  {"lang": "java", "component": "Collections - Set - Insertion", "lang-keywords": "Collections, Set, ConcurrentHashSetV8, LinkedHashSet, Collections.synchronizedSet, ConcurrentSkipListSet, CopyOnWriteArraySet", "observation": "ConcurrentHashSetV8 consumes less energy than LinkedHashSet, Collections.synchronizedSet, ConcurrentSkipListSet, ConcurrentHashSetfor, and CopyOnWriteArraySet for insertion operations."},
  {"lang": "java", "component": "Collections - Set - Traversal", "lang-keywords": "Collections, Set, CopyOnWriteArraySet, ConcurrentHashSetV8, Collections.synchronizedSet", "observation": "CopyOnWriteArraySet and ConcurrentHashSetV8 consume less energy than Collections.synchronizedSet for traversal operations."},
  {"lang": "java", "component": "Collections - Set - Traversal", "lang-keywords": "Collections, Set, ConcurrentHashSetV8, ConcurrentSkipListSet, ConcurrentHashSet", "observation": "ConcurrentHashSetV8 consumes less energy than ConcurrentSkipListSet and ConcurrentHashSet for traversal operations."},
  {"lang": "java", "component": "Control Statements", "lang-keywords": "conditional-operator, if-then-else", "observation": "Conditional operator consumes less energy than if-then-else statement."},
  {"lang": "java", "component": "Control Statements", "lang-keywords": "ternary-operator, if-then-else", "observation": "Ternary operator consumes more energy than if-then-else statement."},
  {"lang": "java", "component": "Exceptions", "lang-keywords": "try-catch, loop", "observation": "Placing try-catch blocks outside loops consumes less energy than placing them inside loops."},
  {"lang": "java", "component": "Exceptions", "lang-keywords": "try-catch, scope", "observation": "The scope of try-catch blocks can impact their energy consumption."},
  {"lang": "java", "component": "Garbage Collection", "lang-keywords": "Garbage-Collection, G1, -XX:+UseG1GC", "observation": "Using the G1 garbage collector with -XX:+UseG1GC reduces energy consumption compared to default in specific workloads."},
  {"lang": "java", "component": "Garbage Collection", "lang-keywords": "Garbage-Collection, Serial, -XX:+UseSerialGC", "observation": "Using the Serial garbage collector with -XX:+UseSerialGC reduces energy consumption compared to default in some benchmarks."},
  {"lang": "java", "component": "Garbage Collection", "lang-keywords": "Garbage-Collection, Concurrent-Mark-Sweep, -XX:+UseConcMarkSweepGC", "observation": "Using the Concurrent Mark Sweep garbage collector with -XX:+UseConcMarkSweepGC reduces energy consumption compared to default in some benchmarks."},
  {"lang": "java", "component": "General - Iteration and Variable Sizes", "lang-keywords": "iteration, variable-size", "observation": "For smaller iteration and variable sizes, different Java code statements consume the same energy as their counterparts."},
  {"lang": "java", "component": "General - Iteration and Variable Sizes", "lang-keywords": "iteration, variable-size", "observation": "Energy consumption differences in Java code statements become apparent with larger iteration and variable sizes."},
  {"lang": "java", "component": "JDK Versions", "lang-keywords": "JDK", "observation": "Different JDK versions result in almost the same energy consumption for various Java code statements."},
  {"lang": "java", "component": "Loops - Collections", "lang-keywords": "Loops, Collections, size", "observation": "Computing collection size outside the loop reduces energy consumption compared to computing inside the loop."},
  {"lang": "java", "component": "Loops - Enhanced For", "lang-keywords": "Loops, enhanced-for, Collections.synchronizedList, indexed-loop", "observation": "Using enhanced for loop can reduce energy for Collections.synchronizedList compared to indexed loop."},
  {"lang": "java", "component": "Loops - Initialization and Termination", "lang-keywords": "Loops, initialization, termination", "observation": "Loop initialization and termination expressions can significantly impact loop energy consumption."},
  {"lang": "java", "component": "Loops - Iteration Variable", "lang-keywords": "Loops, int, long", "observation": "Using int as iteration variable in loops consumes less energy than using long."},
  {"lang": "java", "component": "Loops - Iteration Variable", "lang-keywords": "Loops, int, double", "observation": "Using int as iteration variable in loops consumes less energy than using double."},
  {"lang": "java", "component": "Loops - Termination Expression", "lang-keywords": "Loops, termination, variable, method-call", "observation": "Using a variable in the loop termination expression consumes less energy than using a method call."},
  {"lang": "java", "component": "Loops", "lang-keywords": "for-loop, while-loop, do-while-loop", "observation": "For loops consume less energy than while loops and do-while loops."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Boolean, boolean", "observation": "Boolean objects use more energy than boolean primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Byte, byte", "observation": "Byte objects use more energy than byte primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Character, char", "observation": "Character objects use more energy than char primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Short, short", "observation": "Short objects use more energy than short primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Integer, int", "observation": "Integer objects use more energy than int primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Long, long", "observation": "Long objects use more energy than long primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Float, float", "observation": "Float objects use more energy than float primitive data types."},
  {"lang": "java", "component": "Objects - Wrappers", "lang-keywords": "Double, double", "observation": "Double objects use more energy than double primitive data types."},
  {"lang": "java", "component": "Operators - Arithmetic", "lang-keywords": "addition, multiplication, division, modulus, long", "observation": "Addition operator consumes less energy than multiplication, division, and modulus operators when using long variables."},
  {"lang": "java", "component": "Operators - Arithmetic", "lang-keywords": "subtraction, multiplication, division, modulus, long", "observation": "Subtraction operator consumes less energy than multiplication, division, and modulus operators when using long variables."},
  {"lang": "java", "component": "Operators - Arithmetic", "lang-keywords": "modulus", "observation": "Modulus operator is the most energy-consuming arithmetic operator."},
  {"lang": "java", "component": "Operators - Increment/Decrement", "lang-keywords": "pre-increment, post-increment, post-decrement", "observation": "Pre-increment operator consumes less energy than post-increment and post-decrement operators."},
  {"lang": "java", "component": "Operators - Logical", "lang-keywords": "short-circuit, logical", "observation": "Short-circuit logical operators consume less energy than non-short-circuit logical operators."},
  {"lang": "java", "component": "Strings - Comparison", "lang-keywords": "String, equals, compareTo", "observation": "Using equals method for string comparisons consumes less energy than compareTo method for equality checks."},
  {"lang": "java", "component": "Strings - Concatenation", "lang-keywords": "String, StringBuilder, StringBuffer, concat", "observation": "Using StringBuilder append method for string concatenation consumes less energy than using the concatenation method, concat method, and StringBuffer."},
  {"lang": "java", "component": "Strings - Conversion", "lang-keywords": "String, String.valueOf, Integer.toString", "observation": "Using String.valueOf for converting integers to strings consumes less energy than Integer.toString and new Integer().toString."},
  {"lang": "java", "component": "Variables - Floating Point", "lang-keywords": "float, double, scientific-notation", "observation": "Scientific notation for float and double variables consume less energy than normal notation."},
  {"lang": "java", "component": "Variables - Local vs Static", "lang-keywords": "local-variable, static-variable", "observation": "Local variables consume less energy than static variables."},
  {"lang": "java", "component": "Variables - Primitive Types", "lang-keywords": "int, byte, short, long, float, double, char", "observation": "int variables consume less energy than byte, short, long, float, double, and char variables."},
  {"lang": "java", "component": "Variables", "lang-keywords": "static-variable, instance-variable", "observation": "Static variables consume less energy than instance variables."},
  {"lang": "java", "component": "JVM Options", "lang-keywords": "JVM, -server, -client", "observation": "Using the -server option reduces energy consumption compared to the -client option for certain benchmarks."},
  {"lang": "java", "component": "JVM Options", "lang-keywords": "JVM, -Xint", "observation": "Using the -Xint option increases energy consumption significantly compared to default mode."}
]